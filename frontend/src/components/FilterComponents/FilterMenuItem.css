/* StatusIndicator.css */
.wrapper {
  width: 100%;
  margin: auto;
  padding: 0 10px;
  background-color: var(--sidebar-color);
  box-shadow: var(--shadow);
  font-size: 0.875em;
  border-radius: 5px;
  transition: transform 0.5s ease;
}

.items {
  list-style: none;
  margin: 0;
  padding: 0;
}

.items > li {
  margin: 1px;
  position: relative; /* Для возможности использования абсолютного позиционирования подменю */
}

.items > li > a {
  text-decoration: none;
  color: var(--text-color-menu);
  padding: 10px 0px;
  transition: var(--header-color) 0.4s ease-in-out;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.menuWrap {
  text-decoration: none;
  padding: 10px 0px;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.items > li > .menuWrap a {
  color: var(--text-color-menu);
}

.items > li > .menuWrap a:hover,
.items > li > .menuWrap a.active {
  /* Класс 'active' будет добавлен к текущему активному элементу */
  color: var(--header-color);
}

.sub-items {
  border-left: solid 1px var(--header-color);
  list-style: none;
  visibility: hidden; /* Изменено с display: none на visibility: hidden */
  opacity: 0; /* Добавлено для анимации прозрачности */
  max-height: 0; /* Начальное состояние для анимации высоты */
  overflow: hidden; /* Предотвращает отображение содержимого при max-height: 0 */
  transition: visibility 0s linear 0.5s, opacity 0.5s linear,
    max-height 0.5s ease-out; /* Анимация */
  left: 0;
  right: 0;
  top: 100%;
  background-color: var(--sidebar-color);
}
.sub-items > li > a {
  display: block;
  text-decoration: none;
  color: var(--text-color-menu);
  padding: 10px;
  transition: color 0.4s ease-in-out;
}

.sub-items > li > a:hover {
  color: var(--header-color);
}

.sub-items.show {
  visibility: visible; /* Элемент теперь видим */
  opacity: 1; /* Элемент полностью непрозрачен */
  max-height: 500px; /* Примерное максимальное значение. Настройте в зависимости от содержимого */
  transition-delay: 0s; /* Убедитесь, что visibility становится visible без задержки */
}

.rotate {
  transform: rotate(90deg);
  transition: transform 0.5s ease; /* Плавный переход поворота */
}

.rotateBack {
  transform: rotate(-90deg);
  transition: transform 0.5s ease; /* Плавный переход поворота */
}
/* const [wrapped, setWrapped] = useState(null);
const handleWrapClick = (index) => {
  setWrapped(wrapped === index ? null : index);
}; */
